#!/usr/local/bin/lsc

require! <[fs]>

opt =
  min-conf: 0.5
  path: res: \../res
  quality: [5200 to 8000 by 10].map -> it / 10000
  target-quality: 0.8594
  theme: \NER
  words: negative: 39745 positive: 2556
<<< trivial-word-ratio: require(\./.sim.opt.ls)[opt.theme].trivial-word-ratio

function C n, r then if 1 is r then n else (n / r) * C --n, --r

############################################

alpha = opt.words.positive / opt.words.negative / (1 - opt.trivial-word-ratio.negative)
non-trivial-negative-words = (1 - opt.trivial-word-ratio.negative) * opt.words.negative

factors = {}

rlt = opt.quality.map (quality) ->
  # assume quality = f-score = precision = recall (TPR)

  ntFPR = alpha * (1 - quality) # ntFPR = (P / N) * (1 / (1 - trivial word ratio)) * ((1 - precision) / precision) * TPR

  quantity = 1

  while true, quantity += 2
    min-supp = Math.ceil quantity * opt.min-conf

    [_recall, _ntFPR] = [0, 0]

    for supp in [min-supp to quantity]
      factors[quantity] ?= {}
      factor = factors[quantity][supp] ?= beta: C(quantity, supp), gamma: quantity - supp

      _recall += factor.beta * quality ** supp * (1 - quality) ** factor.gamma
      _ntFPR  += factor.beta * ntFPR   ** supp * (1 - ntFPR)   ** factor.gamma

    _precision = (TP = opt.words.positive * _recall) / (TP + non-trivial-negative-words * _ntFPR)

    break if opt.target-quality <= 2 * _precision * _recall / (_precision + _recall)

  {quality, quantity}

fs.write-file-sync "#{opt.path.res}/verify/NER/quantity-quality.json" JSON.stringify rlt, null 2

# vi:et:ft=ls
