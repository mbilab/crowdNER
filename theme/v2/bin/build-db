#!/usr/local/bin/lsc

require! <[fs]>

#### global variables (with default values)

opt =
  path:
    v1: res: \../../v1/res src: \../../v1/src
    v2: res: \../res
  theta:
    sentence: 1 word: 3
opt.pmids = fs.readdir-sync "#{opt.path.v1.res}/world/box/"

# resources

hybrid-tools-rlt = JSON.parse fs.read-file-sync "#{opt.path.v1.res}/verify/NER/hybrid-tools-rlt.json" \utf-8
stop-words       = JSON.parse fs.read-file-sync "#{opt.path.v1.src}/words/stopWords.json" \utf-8

# v2 database

db-v2 = annotation-list: { non-trivial: [] trivial: [] } sources: {}

#######################################################################################

for pmid in opt.pmids
  db-v2.sources[pmid] = {}

  article = JSON.parse fs.read-file-sync "#{opt.path.v1.res}/world/box/#pmid" \utf-8

  # extract all non-stop words

  candidates = db-v2.sources[pmid].entity-candidates = {}

  for stc, stcid in article.word
    for w, wid in stc
      continue if stop-words[w]

      candidates[w] ?= location: [] sorted-loc: '0': [] '1': [] '2': []
      candidates[w].location.push {stcid, wid} <<< score: if not hybrid-tools-rlt[pmid][stcid] then 0 else hybrid-tools-rlt[pmid][stcid][wid] || 0

  # compute the average score for each entity candidate

  for w, w-info of candidates
    w-info.avg-score = w-info.location.map(-> it.score).reduce((a, b) -> a + b) / w-info.location.length

    if w-info.avg-score >= opt.theta.word then db-v2.annotation-list.non-trivial.push {pmid, w}; w-info <<< {+non-trivial}
    else                                       db-v2.annotation-list.trivial.push {pmid, w}

  # compute sentence level

  sentences = db-v2.sources[pmid].sentences = {}

  for stc, stcid in article.word
    non-trivial-words = stc.map(-> if candidates[it] and candidates[it].non-trivial then 1 else 0).reduce((a, b) -> a + b)

    sentences[stcid] =
      level: if non-trivial-words > opt.theta.sentence then 2 else if non-trivial-words is opt.theta.sentence then 1 else 0
      non-word: article.nonword[stcid], word: stc

  # sort sentence level

  for , w-info of candidates
    for loc in w-info.location
      w-info.sorted-loc[sentences[loc.stcid].level].push {loc.stcid, loc.wid}

fs.write-file-sync "#{opt.path.v2.res}/db.json" JSON.stringify db-v2, null 2

# vi:et:ft=ls
