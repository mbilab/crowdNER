#!/usr/local/bin/lsc

require! <[fs]>

#### global variables (with default values)

opt =
  blacklist: []
  code: event: 2 ignored: 0 normal: -1 protein: 1
  color:
    cyan      : '\033[0;36m'
    dark-gray : '\033[1;30m'
    light-red : '\033[1;31m'
    reset     : '\033[0m'
    yellow    : '\033[1;33m'
  path: res: \../res src: \../src
  restriction: min-stc-value: 0 min-supp: 1
  theme: \NER
<<< require \node-getopt .create [
  * [\b , \blacklist=ARG+  , 'push experiment IDs in blacklist']
  * [\c , \corpusStats     , 'show the statstic data of using corpus']
  * [\h , \help            , 'show this help']
  * [\s , \minSupport=ARG  , "set the minimum support for each labeled sentence (default: #{opt.restriction.min-supp})"]
  * [\t , \theme=ARG       , "specify theme (default: `#{opt.theme}`)"]
  * [\v , \minStcValue=ARG , "set the minimum value of sentence to be extracted (default: #{opt.restriction.min-stc-value})"]
] .bind-help '\nUsage: lsc stc-info.ls\n[[OPTIONS]]\n' .parse-system!options
opt.restriction.min-stc-value = parseInt opt.min-stc-value if opt.min-stc-value
opt.restriction.min-supp = parseInt opt.min-support if opt.min-support

#######################################################################################

gs-answer = JSON.parse fs.read-file-sync "#{opt.path.res}/gs-answer.json" \utf-8
mark-rlt  = JSON.parse fs.read-file-sync "#{opt.path.res}/mark-result.json" \utf-8
stc-value = JSON.parse fs.read-file-sync "#{opt.path.res}/world/stcValue.json" \utf-8

stats = sentence: 0 submit: 0 word: negative: 0 positive: 0

switch opt.corpus-stats
| on
  for pmid, stcs of stc-value.box1
    for stcid, s-val of stcs
      continue if opt.restriction.min-stc-value > s-val

      stats.sentence++

      for , label of gs-answer.box1[pmid][stcid]
        continue if opt.code.ignored is label

        if opt.code.event is label
          if \PPI is opt.theme then stats.word.positive++
          else                      stats.word.negative++
        else if opt.code.normal  is label then stats.word.negative++
        else if opt.code.protein is label then stats.word.positive++

| _
  blacklist = "(#{opt.blacklist * \|})"; s-labeled = {}

  for eid in fs.readdir-sync "#{opt.path.src}/mark-result/subject/"
    continue if opt.blacklist.length and blacklist.test eid

    for log in (fs.read-file-sync "#{opt.path.src}/mark-result/subject/#eid" \utf-8) / \\n .slice 0 -1
      rlt = JSON.parse log

      continue if \submit isnt rlt.action or 1 isnt rlt.box
      continue if opt.restriction.min-stc-value > stc-value.box1[rlt.pmid][rlt.stcid]
      continue if opt.restriction.min-supp > mark-rlt.box1.labeled-stc[rlt.pmid][rlt.stcid].supp

      s-labeled[rlt.pmid] ?= {}

      if not s-labeled[rlt.pmid][rlt.stcid]
        stats.sentence++

        for , label of gs-answer.box1[pmid][stcid]
          continue if opt.code.ignored is label

          if opt.code.event is label
            if \PPI is opt.theme then stats.word.positive++
            else                      stats.word.negative++
          else if opt.code.normal  is label then stats.word.negative++
          else if opt.code.protein is label then stats.word.positive++

        s-labeled[rlt.pmid][rlt.stcid] = {}

      if not s-labeled[rlt.pmid][rlt.stcid][eid]
        stats.mark++

        s-labeled[rlt.pmid][rlt.stcid][eid] = true

console.log stats

# vi:et:ft=ls
